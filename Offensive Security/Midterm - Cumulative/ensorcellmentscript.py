import bz2
import base64
import time
import string

s = b'UWxwb09URkJXU1pUV2FVK2lWTUFGb1ZJQUNxby8rQmdKQncrUUFBQUFEd0FQRDFiS3JTdHRTYk5hQTBxUUthRzBhVkthQUJwUVVXeExRd0FlOEFBR0FqUUFBV3pRQlZVS0JWVlNxS0NpcUFocWVJWlZVd21CcW40RWxWTUpnYWVLb2hWTUpnU2VxU1ZUYW93MU5DaHBwZ0FDcHFTaVVCb1A1MnRxcTRRUmxCSmxCTW9MNWNJNXJvQnN6RytjbVJZa3NUSTgzTDhWY29Fd1NHd2FTall2ZDBMdTIzTFNVR3NsQlJsS3hJck02dzNRclowT21hc0t4V0syVm1WdGxDVlkyMk5ZaTBiR0t4dHRHb0tUVzVxdWJZcU51YlhLTkZSYkZHc1JSdEZGWWlxTEdUYU5XQ05SZ3Fpb3FLMFdqVkZVVE5oS0RCaU5xQzFHeHFLTmtxUzJqWUlwTnNXNWNybHl0QmhOb3E1cm1LTnZsZml0NVZHcys3Y3RqVkdrMktOWTIwWk1SUll3bFJpdFJCUnNVYW9zRnphODFhMXEveU1rREVReVlTVWlNTWdKREVNeHB0aGt3b2pUTTBrYlNaQ2dsRWlNbUVvUmlNaG9Va3NTWm93cEpFaGhRVFpTSkl6Rkpwb3hrMkdScEFNaERNa0pHak1pV1NOTEdRYVpFaUVHTkRCa3BCcFpoRExDaVl5eWpSRVNObU1rSllNUkprQkl5VXdJQU1rQWtKbzBvd0pSb3NKQlNVaUFHTW1RZ015Sk5oSkVtQkZnSmlJbG1ZUVNwa1ZNMUtSaVJDSVFNa21FakZoTU15UUpwTWFBcGxRV0FUSXdrbWFKREZrRVF3V0dCR2lTa1pKSUVsQk5HTFFpa2htdHEyMnYzdjJDeVRLRTBhSXlGTVpRaEF5WUpKYURCbFJoSjc5ODk1M0hwVEphUWJWVmRMT1czQW5Kd3dhY1o0eTJ5R2xTTG8xT1l6T0EwaFVHY1VxRFZkUzVlYzZNQTVVUnNSYk5xcldOQWdFVnFjT2xzb2xHUVRScUViWFNVVkdCYlE2S3hraHViV1duUmdiZ3k0bTRxS3lDR29SdFl6bXpPREZqSWFRcE1ObGNjUmhFTWxCY09NNHlSZGtrekVtTXJpY1JWMXJBVFlUS3pWcVRKWkJ5dWRkSTZHNXNHVnMwUk9LREFtVVVGQ2RBcmpZaERRdEM0ZzVUSUxMRk5jNU5neXdGeTdEdjcxLy8vUGgvbmNEdzFOTE5oL3RXeHZsTnhLOGVkTHpkVWxQRXd2cVYwVVlmRDRENzdOSUwycjZicnFSVE9nOEl6NGEzeDU2YlBrVzFGbWx1a09LRFQzdmI2bTN3NGVqY3IrOFVHajFrRk13bkhBaHFsa2w5QlRnSlozMHlXM3NLZGszZTJLYXN6VmtycGFHYkZGN29RYUo2a01TczBlZm9oR0dtRVdDbEZLRTNBNnAwN3Nkc0drcnR3RUZSR1U0SnBDaHVaY0RCaE5Fd0g0OE40SjQ0Q09RUXJBVHFRbS9reXdRNlU3YkRQdm1NOEkybUVQTzRJOC9IcjNjN1RFeW95SXVzOGlwWUNXMFR4OFF6Y25qd3lXbkMzUk00MDFvZWNmcjc5L1h2aDl0K1U2M3RrQzQrN2VVNE1wcmRmZXR1UjVQeEZPVWY2S2NZQURxcm1yVXF0RFdkSWI2NVFOQmhncERtckNXNlhyYjlNWGNTN0VMSTAwK0tBSXlNYTFna01xMThpNHJzNVhaNG5CalFSckNYeEZEVHZ5aFRYcm1zN09ydEhGTjZ0b1NvWVJGam1sVnh5eTVDVkh5Rkk1MGgzeGpoa3hUeFVBQ3FCaEJKZUM0TnJHMHJ1WWpzeHJ0Y1YyRmMzb3lUWmpnZWZCKzBoUFJUb1dzOERpeHZ6NkJiYjFRV1BLM24zMjhFSkk3a3lSOERWbVVvMVRNN0piaWRGUkV0YjYzUm01cEN5dmN6R1hQY3ZuaXM4U3hJWUExR3pOTFMrckI5SlpxV1NzWWFaeE1Cbm1DeWlrZzIzMjZTSGFOaEdTNWMrNk9HQW5HTElsdzJsa09ZZGkxYXh4QlJhUElNZ2hsVmhrV05xT3QyRW1tRjZzbVVQSHVrb3piQkRURlUzN0QzVmFxWHRkd2MreDZTUlg3U2VzNXRiQUY3bDZOdHA0TURZUGlRR1V3WVVzZ1ZaWWFqU1JSd051bzRZMHlvSTludnMyZE83VjRZRTJHSFE4T1BSOHVVQ082QTlGSHU5cmxDcVBHOHZXdXNhc1BVRno2aGFVa1Q0cGVLUkl0enVFTVdNSVFaMnk3ZDJ2SDVBajBSQ3hLc1Z3Y2ZyVEhhendpYkR4UGM4ZTkzNzk1NTh1ZE93R0V4QkdxSXlOTDgrKytGV0wxUXQzdmN0VzFzbzc1ZURnbG5NTU1lYktJeHlxTERwZW5OZVhFY0tzUTJpbzR3ZDRzaU00TmQ1SEdINUVGaG9nZzJCTnFEd1JrSHUxaW9Tc3RFZzNUcnFmSnpzMWhJR096VDl5S0tKRTNFUGdWVVpkckprVGt0NSthRk56OTRJdEdZUDR3anVRczBSUHQ1bVh5MVFOS3hlSXpVdHlrekRRbVV2QllSWkRqZVF5Zm00dUJjYTN1RFVVZmNNdmFaamZsN3FmUjRnZURKRHM2MVpmYkZFa1hDalZSZkdjYU91Z2ZwdUVOR3NXNzB4ZDgwYXg2K2RWNTcyYzhsWS9EemdtZ0t2dGRYN3NvdWNtelRYV05CaTI1elFVbHdNamVYaXlKcWZaYndrQ25jSXF2SHVSbE50ZlRUV1pMVmQxTThWSjUrOTA3UnIxdmxzVXVTNW9nN2hxektzRjVHbWs3VHJjTXdHUVlkczZneVlsbEYzc3pOVzRnOEl3NWl0VkpZd1AyVFRxc09FazNRYkZaVU5EbTIxQWJUWUg4bWU4eHpxS3BHb3RmSzNMak80YnFMRDY5QnFWeUtJR2l5R3Z0Y05FV3lwYXFQVERsRDhiYm1wNGoxQzNZMXVxa0Vjb1gwdmZlNUNuR3FSZWZvUVVpd0Npa2tnRVdFd2RVYlJmcVpzbWZHZ25WRUh1bHFpb1BKT1ZKSEtNNGtadHJXYVFxNzVHc2l5bG9vcWxFZzVoRGFUUFR4Vk02TU5odDh5d2tBWSs0UFd3aG9XMG4yQ0k3NmNiMFdadExHYVp3YlFwTGFFc1hycUZjM0NNK1BucGpleld2bmg0QmwyVWdVTkRjbHJCRkVsV09TeE9KQkRITzd4VzdoQ0p2Um1lSWZCWGxUNHMrSUJCSjgxaW5HT1dZY3ptZGRZcm1EOGxqRVBZcHoxV0o0cUdiZHFQc2doeUNCK0pCWkJJd01qSWc2bXAwWmQyWmZ6d3ltZE1VSno0bHNSaHZiMDlwSU9uUStma0VvcHcxd3BzTHlqRnVHd3cybVdMT1JEbTkvZWtyOStYdjNWRG9wSzJYZFJJTlR1TGpUTmJxdDdjOGxidUgxMDVZY0c0NjhvZ1FQUVlBeHFMMFdKdmdnV1FScGJLQkRTOGcwMis2ODNuUDBTM0swb3llRm5FUkRHMEdNbzE4Z2xMRjNMeUI0M3U5VmFocXg2dDNLOTA0S2NEdE1wNDdVcUMyMDZqemlTTFJKSm9uWGxDZGtiVTNyaHR3Um8wcXRodUMzbDNIcjdjbFF2WkIzMkhqOXVhQ0UrSXVzcGhRWlZRSU9lMkdnMDBYUk5QZHJ1UFZ1YndYaVluMUpzeGVXVDRtK3U1anVoY1JRM3VsUXlkOXNyU0RDUkR3MjZKNTFkaSsyTk03c2RQbnd5ZFJMT3loY1kyWlFGQlpjRzVDQmNXdnVLOUtxN0dGZDlxUkJCNnAzWnpLdnhlSFZROUNHNzBhU09yVkkxYnBWQk5qQ3I2YnVIUlJKQ3RnM2g2ZWFWS0pJWnNhSnpWeFlpcGEwNlk5OTg5ZnZ2ZlBQWWpwVTByVkpzcVRYb3ZJSHFabGN3clhDMzZpWHlDMGJNN3BQaUtVRy9iUFVnNzRwb0g1c0VOdmxyU05tRFVDU1crSE8xcmoyclB4WGViYXZhWW9qMjBSZFQrbk5pK280d29oZlZNRWd0bEJrTWxzTUZtTzZFdTZXNnVVSGJqOHBZN1lPOWZVZXVueWZBeXY1bGpoRFRkUThGeTdOSDRucHBPOTdlbktSbDVWS1pLamtJR2tyN3EwUEJDOHhzWTk4Z2dRL0M2bWp1U0lRenhJdjFXdUs5YmlaT2NIVWhaKzlzc3FWYzdEM0lVbnV3OFlNUFJieHZxb1phUEYrUmFYZVRMWGNLYjRrZU1Na3lOMHZpZnFMcVJlb3NCWEM2bEVLTW1ycUZLMm1rU3lVcUYwNW1XcXRsWmZTMVhteDdwTVhYM241dXgxWTRYM3MxWlRPek1yU0JwOGRvMm5qVHFXTVIwcHpiS0oxZkVlNVd2eEMzTFByd3FDT3JObUlySWNFN21WSklIQWNrTjNuZlZPK2g5V01IT2JjYjF1STc3cTZPV08xWnVMRzFpSnQydDZ3UnZkMkZVUGV5bFk4cllPRmZRUlVJOU93WG92VTUxcTNXRFo0VWk5Q3ZsN1B5dGU3bXFUUFBoNEpUM0RrcW42QjlrMmt1ZWhtaWMrU09JM1FvV25BYWJCWVF4clF5MncweUtkTFpDNEV5RFc0ZTdyT2RsTVFZM0dSR0RGZGJ3TGF0aVdIVFIwOFNkZXBtVFlEaENEYUFJYlJCWkNnT203TVE0ek1Nd0x1cTNsM2RWQ2cvY0ZCaGtraEhUWUNON2RYUktsUVNVZGcxYlVmbUVrRWZyTFNEUlNDMk96aHNVOWsrbXFaaWt2Q1dpdUZMdENJNm1HK0k0bjBqZ29PMHJJVmxJM3hXYXVlOGdpVVNsSEQ2OXhwSVRTdWNPWlVENGJ6eEU4bVJqdlVIQUtJSTlQdko2WU0yaDRYcFp0QXd2dktjcGgzVWpHSGpZZEhQdWhoU2lKQlpmeEpCK0l6d3NKZVk4Uk9LUTloNmNYZGN2c1o3aFVuMDdlZkw3WjlEOVozMStjUk5rbXNPVnFtMWhSc0lzVVdpczV3NWw0ejgzbjQ4OTk5L2V3aW9MWkhpM0JVM0xPNmZWSGhPYjNUMVR0aUk2eE1tQ0lLZzhDMGthbWlpaUUrb1dESHRpekZSRUpjNzgrejRaclhkMElaSGxxUnFVUEp6enRzZDNwYnJtQWR6amhxRXFYem1nc2NJbWVHbnpLMDBHa2ZzazMzZTl6RDlmVklZcmR6ZGllZjBzajdJVFV3SVliMlBVdXZaTGp5ZU1yWmFRWkZoNFhLcUlpR2M1RFN4Z2VnMG1vek12R2NyTHExQmtqUFZ5azdqWEoxU1RJd1JHcE5hemF4azBjYWM0akdDeUdjdGpFa2pCV0dta2M0d21kRTQwMWxIR1RSbGRGd05wZ1pGdUdkUkZDWmNRZ0dkS1NzallIR2lRT1IwRGpXZWJwWFVaYlZPS3hEamlLTTR4R01DWk5NeVVhcm1STUlMVFpkVFpzYVhLdHF1TG9ETXVIQzZiYWxjVndncWFkckhMR3NpZEZyVm5IU3lScHNPY3ltOTU1M3Q2UE8vZ1lHejFWRWhsRkdvVGJGb0V0a2dwQzBXbzJxU3NZaXFLalJhQ2tpUmtrWTBNQU5ScVNSQUswV0lTcG14cWlqR3NaTGFOaEtob1FsaElyUlZpeHJZMFVva0dTd05DWm1sTXpBU0pLTnNGYlJzVlJ0UWxKcUZMQ0dLRFZ0VmkyaUkxR3lSYlJpckcyZ0xVYW9ySlFKQkJXTEZXSUtwSk5wTklha3hDbWlFSk0yYUprSVViYUNxS05VV28xcGxKYkJHaUtveEZLQ1JScllvclFWUnFOSlVnbEVrVVlzc01Zc2tJV0lqWU5ZMEZxTUZVbGpheFJwTmFEY1k3dTNidkh6Q2VRMktVeU9PYzJ5a2xHRTJMSEdLNG5FQWp0UEdoZ2xjUlFDWU1HcXNOQmhYVmhhbXdvZ05TazlCanNjQVRpdE9MSlR5QTRxYmFZc2FES0pSWVdMQ2FhRGFlVFJaa2NNb3FHVk9jS0xuRExHWVkwem94ckFOc2pJZkxIR0VOeTdycmlKeHVPdUppVENkZDBJbHpzMWpPN3R6cHc1M2RUbllPRWx3U1VqYnJ1M0xtNVozVHJyams1Y2xkVHVYWFhMblZLZHpjK3RteTdCWWlZUWtsTXlSa2swRW9ra2hNUURFd0YwbElNYWFCS0t6S0EwYXhHc1l4VEttSk4wakdPb2l6WFRwb2xqYU1WUmpiS1NXSk5VcHNXTkpFR2tzeEtSTVRUUkdoQkMwQnRKakpHeHRHTEJyUnNsU1dJeGtvMk5CWmtsRzJLWnRFSnJTQWhtU21DUVRFbUttWlRGVExaQU5RVWFZV294R3Bta2lyYW5FazB3Z3d5a0l3WUJLR0Znb0pVbEFwQVRKaHNUR2tBelNLV0xFbU5DWmtVUmpJa214bUVGZ1NTaUNvU3hwaE11MjJaNzNHejNQV2NsUjEwa2RPZDNjVzJGM0xaUTR3cTVBRU1tVkZEbHk2U2Jsd3VYZDEzWE95SkxwanV1ZHppYnVpNTB1dXVrazBadWJ1NTJubUROdjluNm0yVTduT3QwRkNXTnkxdWF4eTF5RXRpcU5HMk5wL25YTG10SE1XalkycVRiWXZJMTU1dFl0WTFHamFpclFSbzFHb3RHc2E4MXpXNXRYSzNORnRYU3dSYnlybjdjeHJYbHJ1N211VzZiSHkxWE1ScUxGcWpXTVdEUlhtMXkyamFqV0szbHVjMjVZMUpHS3dlYTF5SzBUdTIxejNkRlhPVVl0cURYbjdWNTgxOHIzKzhkWld2Y2ZiYjdQbmRzcHExTTZHck1ZMno3cS8xNVJmTFc1UlJZMXZtblJsWUh2emh1ZzlkS2JkRFZSWTF1YlVYQ3ZtODIzaHlxK2F2TmtQa2ZJUFd6cnJIeTNySHBxZGJkWW8yMWNOODNsYzFlVmJ5aldOeTV0RnViWEtxUWlOc1VXMGx0SG0zS1NOakpCV294QmFMVUdUYkZKV2plVzNOWXFLalpPN055eFBkMWlpbVUxREtWNXVhamJibHlxN3Vpc1l0SE5Zb3R6OGJtM3pjK2FOYzFZdFJVVjV6VkZiZVczTWwzZHJCV05vMnFLM2xyR3VXb28xR2dxeVkxRmpXdVZYTlVZdHZ4cjVXeHJ6YkZ0SmpWeXJjckVsWTJqRnNWdXMzV3pHSlorUnVxYXNyMW5UN1oxTm5kY0kzdSs5Ym1rbzBFRVpxMmZKbDNEYlUyVXlqZE5XMmRERmFUYU1mTnJtMWN0ZnBYeTIrYTMyT2xEMXRxT1NoMXQwWjMzdG5waTE1b3JoYjlPYXNhaWkyTEVObGFxSzJ5Z2Z0YnA5bWZaanJiMGlyR2kwYUxYVGJubHR6dXUzTWEzS2kyM0xtclJSUnNXdk51RlZ0dlhvNlBSNzNZZWltM1J1bXJONXJtc1d4RnJHaTBWaXViY3RJNkhvMmJQUVVNNmJkR1BUZE5HM0xHMUhUR3JsWTJpaTFZcTFybTJPVzVxamJsSE1XamQzYXQ4dHlJODE5N3FzYlc1YjB2TmJ5MjYxRzZPalNaSWIwOVo2TTYzcnkwR2kvUzF5dDVyYm0zem05THU2dHpWR0lzbXdHZzI4dDVqVjV2S3Q1ZUlhalJFSlZGcWQxeld2TGROalV2ZHR1WWpHckZVWWcyeHYwNVdMUmJ6YTVyblNzWW9LMmI1WjEzY0pOUnEyZW5TOXpvRmNyeXQ1NU82THpYTnQ1YmtWalRNYkorZm5lYStWMElqWXJsWElvamEvanUwbTgyM1A0WEt2bk5ncjV1WHVISkxiV20zVllkYloxaXN6cHFEWExYZDJyemJlWGx6WG11V0xHMUt6VWVqcmVuSWRVNVB5T2w5NXpXTk82N052dTdiR01hOTNHek5SUmJjbmRSckZaS295VUJHU0kxb3NsUlkxaVFwUU5GRmlvdDVWeWdDaTFHN3V0aTJMVnpYTWFLdVc1RWFqWXFqRllxbzg1YWpMdTVXQ1RHcDd0cTVHMXpicGJSckdwSXhGM04vNHU1SXB3b1NGS2ZSS20='

def hexencoded(s):
	try:
		int(s, 16)
		return True
		#return bytes.fromhex(s)
	except ValueError:
		return False

def bz2encoded(s):
	try:
		return bz2.compress(bz2.decompress(s)) == s
	except Exception:
		return False

def base64encoded(s):
	try: 
		return (base64.b64encode(base64.b64decode(s))).decode('utf-8') == s
	except Exception:
		return False

start_time = time.time()
iteration = 1
can_decode = 1
while True:
	iteration = iteration + 1
	try:
		s_decoded = s.decode('utf-8')
	except Exception:
		can_decode = 0
	
	if not can_decode:
		if bz2encoded(s):
			#print("Is bz2 encoded:")
			s = bz2.decompress(s)
		else:
			#print("Could not decode and not bz2\n")
			exit()
		can_decode = 1
		continue
	
	s_decoded = s_decoded.replace("'", "")
	s_decoded = s_decoded.replace('"', '')
	s_decoded = s_decoded.replace('\\', '')
	if 'flag' in s_decoded:
		print("Our flag is: ", s.decode('utf-8'))
		print("Finding the flag took %s iterations of decoding" % (iteration-1))
		print("Execution Time: --- %s seconds ---" % (time.time() - start_time))
		exit()
	elif hexencoded(s_decoded):
		#print("Is hex encoded:")
		s = bytes.fromhex(s_decoded)
		continue
	elif base64encoded(s_decoded):
		#print("Is base64 encoded:")
		s = base64.b64decode(s_decoded)
		continue
	else:
		print("FAILED TO FIND AN ENCODING: \n")
		print(s)
		exit()
